---
title: "Dados do IBGE"
lightbox: true
lang: pt
---
## Sobre

Outras fontes de dados podem ajudar em algumas análises. Nesta seção veremos como recuperar e preprocessar dados do [Sistema IBGE de Recuperação Automática - SIDRA](https://sidra.ibge.gov.br/home/pnadct/brasil). 

No Sistema Sidra, opção `Acervo`, podemos obter uma grande variedade de planilhas com dados socioeconômicos. A interface de busca e filtros é mostrada na figura abaixo:

![](Resources/Images/Sidra-Acervo.webp){.lightbox}

Para as análises que queremos demonstrar usaremos duas planilhas:

* Usando os filtros [`IO - Produto Interno Bruto dos Municípios` e `81 - Contas Nacionais e Regionais`](https://sidra.ibge.gov.br/acervo#/S/IO/A/81/T/Q) baixamos a planilha _Tabela 5938 - Produto interno bruto a preços correntes, impostos, líquidos de subsídios, sobre produtos a preços correntes e valor adicionado bruto a preços correntes total e por atividade econômica, e respectivas participações_. <br>
Para esta planilha somente é possível obter dados de 2021, mas servem para as nossas análises e gráficos.
 * Usando os filtros [`C2 - Objetivos de Desenvolvimento Sustentável` e `304 - Erradicação da pobreza`](https://sidra.ibge.gov.br/acervo#/S/C2/A/304/T/Q) baixamos a planilha _Tabela 5817 - Indicador 1.1.1 - Proporção da população abaixo da linha de pobreza internacional_ para o ano de 2022.
 * Usando os filtros [`C2 - Objetivos de Desenvolvimento Sustentável` e `27 - Educação`](https://sidra.ibge.gov.br/acervo#/S/C2/A/27/T/Q) baixamos a planilha _Tabela 7783 - Indicador 4.a.1 - Proporção de escolas dos anos iniciais e finais do ensino fundamental, do ensino médio, por infraestrutura das escolas_ para o ano de 2022, considerando somente o número de escolhas de ensino médio por estado.
 * Usando os filtros [`CD - Censo Demográfico` e `52 - Pessoas`](https://sidra.ibge.gov.br/acervo#/S/CD/A/52/T/Q) baixamos a planilha _Tabela 1209 - População, por grupos de idade_ para o ano de 2022.

::: {.callout-note}
 Os _links_ acima levam para páginas que contém outras bases de dados associadas. Procure pelos números das planilhas caso queira baixá-las novamente. Outros passos poderão ser necessários (ex. para selecionar anos e outras informações) -- no caso escolhi baixar planilhas preparadas com dados de cada unidade federativa.
:::

### Criando um _dataframe_ sobre Estados

As planilhas baixadas devem ser preprocessadas para conter somente os dados que precisamos (ex. eliminando cabeçalhos e rodapés). Podemos fazer isto em poucas linhas de código, primeiro importando as bibliotecas necessárias:

```{python}
import pandas as pd
import re
import warnings
from IPython.display import Markdown
from tabulate import tabulate
```

Vamos criar um _dataframe_ base com informações sobre cada estado brasileiro. A área também foi obtida [no site do IBGE](https://www.ibge.gov.br/geociencias/organizacao-do-territorio/estrutura-territorial/15761-areas-dos-municipios.html).

```{python}
# Criamos um dicionário de nomes, siglas e áreas dos estados:
data = [
    {'Estado': 'Acre', 'Sigla': 'AC', 'Área': 164173.429},
    {'Estado': 'Alagoas', 'Sigla': 'AL', 'Área': 27830.661},
    {'Estado': 'Amapá', 'Sigla': 'AP', 'Área': 142470.762},
    {'Estado': 'Amazonas', 'Sigla': 'AM', 'Área': 1559255.881},
    {'Estado': 'Bahia', 'Sigla': 'BA', 'Área': 564760.429},
    {'Estado': 'Ceará', 'Sigla': 'CE', 'Área': 148894.447},
    {'Estado': 'Distrito Federal', 'Sigla': 'DF', 'Área': 5760.784},
    {'Estado': 'Espírito Santo', 'Sigla': 'ES', 'Área': 46074.448},
    {'Estado': 'Goiás', 'Sigla': 'GO', 'Área': 340242.859},
    {'Estado': 'Maranhão', 'Sigla': 'MA', 'Área': 329651.496},
    {'Estado': 'Mato Grosso', 'Sigla': 'MT', 'Área': 903208.361},
    {'Estado': 'Mato Grosso do Sul', 'Sigla': 'MS', 'Área': 357142.082},
    {'Estado': 'Minas Gerais', 'Sigla': 'MG', 'Área': 586513.983},
    {'Estado': 'Pará', 'Sigla': 'PA', 'Área': 1245870.704},
    {'Estado': 'Paraíba', 'Sigla': 'PB', 'Área': 56467.242},
    {'Estado': 'Paraná', 'Sigla': 'PR', 'Área': 199298.981},
    {'Estado': 'Pernambuco', 'Sigla': 'PE', 'Área': 98067.877},
    {'Estado': 'Piauí', 'Sigla': 'PI', 'Área': 251755.481},
    {'Estado': 'Rio de Janeiro', 'Sigla': 'RJ', 'Área': 43750.425},
    {'Estado': 'Rio Grande do Norte', 'Sigla': 'RN', 'Área': 52809.599},
    {'Estado': 'Rio Grande do Sul', 'Sigla': 'RS', 'Área': 281707.151},
    {'Estado': 'Rondônia', 'Sigla': 'RO', 'Área': 237754.172},
    {'Estado': 'Roraima', 'Sigla': 'RR', 'Área': 223644.53},
    {'Estado': 'Santa Catarina', 'Sigla': 'SC', 'Área': 95730.69},
    {'Estado': 'São Paulo', 'Sigla': 'SP', 'Área': 248219.485},
    {'Estado': 'Sergipe', 'Sigla': 'SE', 'Área': 21938.188},
    {'Estado': 'Tocantins', 'Sigla': 'TO', 'Área': 277423.627}
]
# Criamos nosso dataframe a partir do dicionário:
dfBase = pd.DataFrame(data)
```


### Criando um _dataframe_ sobre dados socioeconômicos

Vamos agora ler a planilha com dados sobre o PIB, renomeando suas colunas para facilitar a manipulação:

```{python}
# Evitamos mensagens sobre importação de planilhas.
with warnings.catch_warnings():
    warnings.filterwarnings("ignore", category=UserWarning, 
                            module=re.escape('openpyxl.styles.stylesheet'))
    dfPIB = pd.read_excel('Resources/Data/OutrosDados/tabela5938.xlsx')
    dfPIB.columns = ['Estado', 'PIB']
```

Vamos também criar um _dataframe_ a partir da planilha com dados sobre a proporção da população abaixo da linha de pobreza internacional:

```{python}
# Evitamos mensagens sobre importação de planilhas.
with warnings.catch_warnings():
    warnings.filterwarnings("ignore", category=UserWarning, 
                            module=re.escape('openpyxl.styles.stylesheet'))
    dfPALB = pd.read_excel('Resources/Data/OutrosDados/tabela5817.xlsx')
    dfPALB.columns = ['Estado', 'PALB']
```

Finalmente vamos criar um _dataframe_ a partir da planilha com o número de escolas de ensino médio:

```{python}
# Evitamos mensagens sobre importação de planilhas.
with warnings.catch_warnings():
    warnings.filterwarnings("ignore", category=UserWarning, 
                            module=re.escape('openpyxl.styles.stylesheet'))
    dfEEM = pd.read_excel('Resources/Data/OutrosDados/tabela7783.xlsx')
    dfEEM.columns = ['Estado', 'Infraestrutura','EEM']
# Não precisamos da coluna 'Infraestrutura':
dfEEM = dfEEM.drop(columns=['Infraestrutura'])
```

Podemos então unir os _dataframes_ usando o campo `Estado` como chave. Basicamente a união juntará duas planilhas baseado no valor da coluna `Estado`, evitando trazer valores onde não exista correspondência.

```{python}
união = pd.merge(dfBase, dfPIB, on='Estado', how='left')
união = pd.merge(união, dfPALB, on='Estado', how='left')
união = pd.merge(união, dfEEM, on='Estado', how='left')
```

Mostramos o resultado como uma tabela:

```{python}
Markdown(tabulate(
  união, 
  headers=["Estado","Sigla","PIB","% Abaixo Linha Pobreza","EEM"],
  showindex=False,
))
```

Salvamos esta base para uso posterior:

```{python}
união.to_csv("Resources/Data/OutrosDados/DadosIBGE.csv",index=False) 
```

### Criando um _dataframe_ com informações sobre a população

A planilha com dados sobre a população por grupos de idade deve ser processada de forma diferente, uma vez que contém vários campos por estado. Vamos pular os cabeçalhos e total de população para o Brasil e ajustar os nomes dos campos manualmente:

```{python}
# Evitamos mensagens sobre importação de planilhas.
with warnings.catch_warnings():
    warnings.filterwarnings("ignore", category=UserWarning, 
                            module=re.escape('openpyxl.styles.stylesheet'))
    dfPOP = pd.read_excel('Resources/Data/OutrosDados/tabela1209.xlsx',
                          skiprows=18, header=None)
# Ajustamos os nomes dos campos.  
dfPOP.columns = ['Estado', 'Ano', 'Grupo de Idade', 'População']
# Como só usaremos um ano não precisamos daquela coluna.
dfPOP = dfPOP.drop(columns=['Ano'])
```


Por causa do formato da planilha original, o nome do estado só aparece na primeira linha de seu bloco de informações. Podemos resolver isto facilmente com um preenchimento para frente de valores ausentes:

```{python}
dfPOP['Estado'] = dfPOP['Estado'].ffill()
```

Agora precisamos reordenar a planilha para que cada um dos valores da coluna 'Grupo de Idade' vire uma nova coluna: 

```{python}
reordenada = dfPOP.pivot_table(index=['Estado'], columns='Grupo de Idade', 
                               values='População', aggfunc='first').reset_index()
```

Quando os dados da planilha são reordenados a ordem para as colunas não é a ideal: alguns valores são considerados numéricos e gostaríamos que a coluna `Total` fosse a primeira depois de `Estado`. Para reordenar podemos criar uma ordem explícita:

```{python}
# Define a custom order for the age range columns
ordemFaixas = [
    'Total',
    '0 a 4 anos',
    '5 a 9 anos',
    '10 a 14 anos',
    '15 a 17 anos',
    '15 a 19 anos',
    '18 e 19 anos',
    '20 a 24 anos',
    '25 a 29 anos',
    '30 a 39 anos',
    '40 a 49 anos',
    '50 a 59 anos',
    '60 a 69 anos',
    '70 anos ou mais',
    'Idade ignorada'
]
```

Basta criar um _subset_ do _dataframe_ com as colunas na ordem que queremos:

```{python}
colunasEmOrdem= ['Estado'] + [col for col in ordemFaixas if col in reordenada.columns]
reordenada = reordenada[colunasEmOrdem]
```

Esta planilha tem uma coluna redundante: `15 a 19 anos`, que é a soma das colunas `15 a 17 anos` e `18 e 19 anos`. Vamos eliminar a redundante para simplificar. 

```{python}
reordenada = reordenada.drop(columns=['15 a 19 anos'])
```

Vamos unir este _dataframe_ com o de base, com nomes dos estados e suas áreas.

```{python}
união = pd.merge(dfBase, reordenada, on='Estado', how='left')
```

Vamos salvar este _dataframe_ para uso posterior.

```{python}
união.to_csv("Resources/Data/OutrosDados/IBGEPopulação.csv",index=False) 
```

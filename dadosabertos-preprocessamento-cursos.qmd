---
title: "Pré-Processamento dos Dados - Cursos"
lightbox: true
lang: pt
---
## Sobre

Nesta seção vamos ler, verificar e unificar os [dados sobre cursos, baixados do Portal de Dados Abertos](dadosabertos-baixando.qmd#sec-dados-abertos-cursos), transformando as planilhas em bases de dados que facilitarão as análises.

### Verificação inicial de consistência

Vimos na [tabela de arquivos baixados](dadosabertos-baixando.qmd#tbl-abertos-baixando-cursos) que todos os arquivos (cobrindo os anos entre 2013 e 2023) tem o nesmo número de colunas (28). Primeiramente vamos ver se todas as planilhas contém as mesmas colunas.

Importamos as bibliotecas necessárias:

```{python}
import pandas as pd
import glob
import re
import warnings
```

Criamos uma lista com todas as planilhas com dados dos cursos:

```{python}
arquivos = glob.glob('Resources/Data/DadosAbertos/br-capes-colsucup-curso*.xlsx')
```

Lemos todas as planilhas, armazenando as suas colunas em uma lista de colunas:

```{python}
colunas = []
for arquivo in arquivos:
    # Evitamos mensagens sobre importação de planilhas.
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning, 
                                module=re.escape('openpyxl.styles.stylesheet'))
        df = pd.read_excel(arquivo)
        colunas.append(df.columns.tolist())
```

Verificamos se todas as listas de colunas são iguais à primeira:

```{python}
# Usamos a primeira coluna como padrão.
colunasPadrão = colunas[0]
# Criamos uma lista de diferenças.
diferenças = []
# Para cada lista de colunas...
for idx, columns in enumerate(colunas):
    # Se for diferente do padrão...
    if columns != colunasPadrão:
        # Adicionamos à lista de diferenças.
        diferenças.append((arquivos[idx], columns))

# Mostramos o resultado: se tivermos alguma diferença
if diferenças:
    print("Os seguintes arquivos tem colunas diferentes:")
    for arq, cols in diferenças:
        print(f"{arq}: {cols}")
else:
    print("Todos os arquivos tem as mesmas colunas.")
```

Para este caso específico verificamos que todos os arquivos tem as mesmas colunas Isto não acontecerá em outros conjuntos de dados, portanto o trecho de código acima será útil para identificar diferenças entre campos de planilhas de um mesmo conjunto.

### Unificando os dados das planilhas

Cada uma das planilhas desta coleção de dados corresponde aos dados coletados em determinado ano -- podemos ver na [tabela de arquivos baixados](dadosabertos-baixando.qmd#tbl-abertos-baixando-cursos) que o número de linhas por ano aumenta gradativamente, contendo informações sobre novos cursos (e eventualmente retirando informações sobre cursos desativados). É interessante então manter a informação por ano e por curso ao unificar os dados. 

Vamos primeiro ler todos os arquivos e colocá-los em uma lista de _dataframes_:

```{python}
dfs = []
# Para cada arquivo na lista de arquivos de planilhas:
for arquivo in arquivos:
    # Evitamos mensagens sobre importação de planilhas.
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning, 
                                module=re.escape('openpyxl.styles.stylesheet'))
        df = pd.read_excel(arquivo)
        dfs.append(df)
```

Podemos então concatenar todos os _dataframes_ em um só:

```{python}
dadosCombinados = pd.concat(dfs, ignore_index=True)
```

Nem todos os campos do _dataframe_ unificado tem utilidade direta para as análises e gráficos sendo considerados. Por simplicidade, podemos eliminar os que não serão. Na [mesma página](dadosabertos-baixando.qmd#sec-dados-abertos-cursos) onde temos acesso aos _links_ das planilhas podemos baixar o documento `Metadados de Cursos da Pós-Graduação`, que mostra todos os campos das planilhas. Destes manteremos os mostrados na lista a seguir:

* **AN_BASE**: Ano de referência da coleta dos dados
* **NM_GRANDE_AREA_CONHECIMENTO**: Grande Área de Conhecimento à qual o programa de pós-graduação está vinculado
* **NM_AREA_CONHECIMENTO**: Área de Conhecimento à qual o programa de pós-graduação está vinculado
* **NM_SUBAREA_CONHECIMENTO**: Subárea de Conhecimento à qual o Programa de pós-graduação está vinculado
* **NM_ESPECIALIDADE**: Especialidade do conhecimento à qual o programa de pós-graduação está vinculado
* **CD_AREA_AVALIACAO**: Código identificador da área de avaliação do programa de pós-graduação
* **NM_AREA_AVALIACAO**: Área de avaliação do programa de pós-graduação
* **CD_ENTIDADE_CAPES**: Código da Instituição de Ensino Superior na CAPES
* **SG_ENTIDADE_ENSINO**: Sigla da Instituição de Ensino Superior do programa de pós-graduação
* **NM_ENTIDADE_ENSINO**: Instituição de Ensino Superior do programa de pós-graduação
* **CS_STATUS_JURIDICO**: Classificação da Natureza Jurídica da Instituição do programa de pós-graduação
* **DS_DEPENDENCIA_ADMINISTRATIVA**: Descrição da Dependência Administrativa da Instituição de Ensino do programa de pós-graduação
* **DS_ORGANIZACAO_ACADEMICA**: Organização acadêmica da Instituição de Ensino Superior
* **NM_REGIAO**: Nome da Região 
* **SG_UF_PROGRAMA**: Sigla da Unidade da Federação do programa discrete character
* **NM_MUNICIPIO_PROGRAMA_IES**: Município sede do programa de pós-graduação
* **CD_PROGRAMA_IES**: Código do programa de pós-graduação na CAPES
* **NM_PROGRAMA_IES**: Nome do programa de pós-graduação discrete character
* **CD_CURSO_PPG**: Código do Curso de pós-Graduação na CAPES
* **NM_CURSO**: Nome do curso de pós-graduação
* **NM_GRAU_CURSO**: Grau acadêmico do curso de pós-graduação
* **CD_CONCEITO_CURSO**: Código do conceito do curso
* **AN_INICIO_PREVISTO**: Ano de ínicio previsto para o curso
* **DS_SITUACAO_CURSO**: Situação de atividade do curso d
* **DT_SITUACAO_CURSO**: Data da situação do curso

Podemos filtrar o _dataframe_ mantendo somente estes campos, mas o código para filtrar os campos não necessários é mais simples. Usamos o documento de metadados como referência para criar uma lista de campos a serem filtrados:

```{python}
filtrar = ['CD_ENTIDADE_EMEC','ID_ADD_FOTO_PROGRAMA_IES',
           'ID_ADD_FOTO_PROGRAMA']
dadosFiltrados = dadosCombinados.drop(columns=filtrar)
```

Finalmente podemos armazenar o _dataframe_ com os dados das planilhas unificadas e sem as colunas desnecessárias em um arquivo local:

```{python}
dadosFiltrados.to_csv('Resources/Data/DadosAbertos/Cursos.csv', index=False)
```

Qual é o tamanho da nossa base de dados em linhas e colunas?

```{python}
linhas, colunas = dadosFiltrados.shape
print(f"A base tem {linhas} linhas (registros) e {colunas} colunas (campos).")
```